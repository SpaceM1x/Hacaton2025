import { Injectable, inject } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { firstValueFrom } from 'rxjs';
import { environment } from '../../environments/environment';

export interface UserCourseProgress {
  courseId: number;
  courseTitle: string;
  courseCategory?: string;
  courseDescription?: string;
  avatarUrl?: string;
  progress: number; // 0-100
  score: number; // —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª
  enrolled?: string; // –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞
  completed?: string; // –¥–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  status?: string;
}

export interface UpdateProgressRequest {
  courseId: number;
  progress: number;
  score?: number;
}

@Injectable({ providedIn: 'root' })
export class ProgressService {
  private http = inject(HttpClient);
  private apiBaseUrl = environment.apiBaseUrl;

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≤—Å–µ–º –∫—É—Ä—Å–∞–º
   */
  async getUserProgress(): Promise<UserCourseProgress[]> {
    try {
      console.log('üîÑ ProgressService: –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±—ç–∫–µ–Ω–¥–∞...');
      const progress = await firstValueFrom(
        this.http.get<UserCourseProgress[]>(`${this.apiBaseUrl}/progress/courses`)
      );
      console.log('‚úÖ ProgressService: –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—É—á–µ–Ω:', progress?.length || 0);
      return progress ?? [];
    } catch (e: any) {
      console.error('‚ùå ProgressService: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', e);
      return [];
    }
  }

  /**
   * –ù–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞
   */
  async startCourse(courseId: number): Promise<UserCourseProgress | null> {
    try {
      console.log('üîÑ ProgressService: –Ω–∞—á–∏–Ω–∞–µ–º –∫—É—Ä—Å', courseId);
      const progress = await firstValueFrom(
        this.http.post<UserCourseProgress>(`${this.apiBaseUrl}/progress/start/${courseId}`, {})
      );
      console.log('‚úÖ ProgressService: –∫—É—Ä—Å –Ω–∞—á–∞—Ç:', progress);
      return progress;
    } catch (e: any) {
      console.error('‚ùå ProgressService: –æ—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∫—É—Ä—Å–∞:', e);
      return null;
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞
   */
  async updateProgress(request: UpdateProgressRequest): Promise<UserCourseProgress | null> {
    try {
      console.log('üîÑ ProgressService: –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å:', request);
      const progress = await firstValueFrom(
        this.http.put<UserCourseProgress>(`${this.apiBaseUrl}/progress/update`, request)
      );
      console.log('‚úÖ ProgressService: –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω:', progress);
      return progress;
    } catch (e: any) {
      console.error('‚ùå ProgressService: –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', e);
      return null;
    }
  }
}
