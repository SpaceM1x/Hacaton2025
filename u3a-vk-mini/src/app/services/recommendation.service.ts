import { Injectable, inject } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { firstValueFrom } from 'rxjs';
import { VKBridgeService } from './vk-bridge.service';
import { ResultsService } from './results.service';
import { environment } from '../../environments/environment';

export interface CandidateCourse {
  id: string;
  title: string;
  category: string;
  description?: string;
}

export interface UserProfile {
  firstName?: string;
  lastName?: string;
  age?: number;
  city?: string;
  country?: string;
  interests?: string[];
  education?: string;
  occupation?: string;
  sex?: number; 
}

@Injectable({ providedIn: 'root' })
export class RecommendationService {
  private http = inject(HttpClient);
  private vk = inject(VKBridgeService);
  private results = inject(ResultsService);
  private endpoint = `${environment.apiBaseUrl}/recommendations`;

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫—É—Ä—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param candidates –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
   * @returns –ú–∞—Å—Å–∏–≤ –∏–∑ 3 –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö ID –∫—É—Ä—Å–æ–≤
   */
  async getRecommendations(candidates: CandidateCourse[]): Promise<string[]> {
    try {
      console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...');
      
      const userProfile = await this.collectUserProfile();
      console.log('üë§ –°–æ–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userProfile);
      
      const availableCandidates = this.filterCompletedCourses(candidates);
      console.log('üìö –î–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', availableCandidates.length, '–∏–∑', candidates.length);
      
      if (availableCandidates.length === 0) {
        console.log('üéâ –í—Å–µ –∫—É—Ä—Å—ã —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω—ã!');
        return [];
      }
      
      const recommendedIds = await this.queryBackend(userProfile, availableCandidates);
      console.log('ü§ñ –û—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:', recommendedIds);
      
      if (recommendedIds.length > 0) {
        const result = recommendedIds.slice(0, 3);
        console.log('‚úÖ –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:', result);
        return result;
      }
      
      console.log('‚ö†Ô∏è –ù–µ–π—Ä–æ—Å–µ—Ç—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏');
      return [];
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:', error);
      console.log('üö´ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã - —Å–µ—Ä–≤–∏—Å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç');
      return [];
    }
  }

  /**
   * –§–∏–ª—å—Ç—Ä—É–µ—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
   */
  private filterCompletedCourses(candidates: CandidateCourse[]): CandidateCourse[] {
    const user = this.vk.user();
    if (!user) {
      return candidates;
    }

    const userResults = this.results.getAll(user.id);
    
    return candidates.filter(course => {
      const result = userResults[course.id];
      const isCompleted = result && (result.progress ?? 0) >= 100;
      
      if (isCompleted) {
        console.log(`üìã –ö—É—Ä—Å "${course.title}" —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω (${result.progress}%)`);
      }
      
      return !isCompleted;
    });
  }

  /**
   * –°–æ–±–∏—Ä–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ VK Bridge
   */
  private async collectUserProfile(): Promise<UserProfile> {
    const profile: UserProfile = {};

    try {
      const user = this.vk.user();
      if (user) {
        profile.firstName = user.first_name;
        profile.lastName = user.last_name;
      }

      try {
        const userInfo: any = await this.vk.bridge('VKWebAppGetUserInfo', {});
        if (userInfo) {
          profile.age = this.calculateAge(userInfo.bdate);
          profile.city = userInfo.city?.title;
          profile.country = userInfo.country?.title;
          profile.sex = userInfo.sex;
        }
      } catch (e) {
        console.log('VKWebAppGetUserInfo –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é');
      }

      try {
        const launchParams = await this.vk.getLaunchParams();
        if (launchParams && launchParams.vk_user_id) {
          console.log('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª—É—á–µ–Ω—ã:', launchParams);
        }
      } catch (e) {
        console.log('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
      }

      if (profile.city) {
        const regionalInterests = this.getRegionalInterests(profile.city);
        if (regionalInterests.length > 0) {
          profile.interests = regionalInterests;
        }
      }

    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }

    return profile;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–≥–∏–æ–Ω–∞
   */
  private getRegionalInterests(city: string): string[] {
    const cityLower = city.toLowerCase();
    const interests: string[] = [];

    if (cityLower.includes('–º–æ—Å–∫–≤') || cityLower.includes('–ø–µ—Ç–µ—Ä–±—É—Ä–≥') || cityLower.includes('—Å–ø–±')) {
      interests.push('—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–∫–∞—Ä—å–µ—Ä–∞', '–±–∏–∑–Ω–µ—Å');
    }
    
    if (cityLower.includes('–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥') || cityLower.includes('–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫') || 
        cityLower.includes('–∫–∞–∑–∞–Ω—å') || cityLower.includes('–Ω–∏–∂–Ω–∏–π')) {
      interests.push('–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–∫—É–ª—å—Ç—É—Ä–∞');
    }
    
    interests.push('–∑–¥–æ—Ä–æ–≤—å–µ', '—Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ');
    
    return interests;
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è
   */
  private calculateAge(bdate?: string): number | undefined {
    if (!bdate) return undefined;
    
    const parts = bdate.split('.');
    if (parts.length === 3) {
      const birthYear = parseInt(parts[2]);
      const currentYear = new Date().getFullYear();
      return currentYear - birthYear;
    }
    
    return undefined;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –±—ç–∫–µ–Ω–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
   */
  private async queryBackend(userProfile: UserProfile, candidates: CandidateCourse[]): Promise<string[]> {
    const body = {
      userProfile: userProfile,
      courses: candidates
    };

    try {
      console.log('üîÑ RecommendationService: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –±—ç–∫–µ–Ω–¥', {
        endpoint: this.endpoint,
        userProfileKeys: Object.keys(userProfile),
        candidatesCount: candidates.length
      });

      const response: any = await firstValueFrom(
        this.http.post(this.endpoint, body)
      );

      console.log('‚úÖ RecommendationService: –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –±—ç–∫–µ–Ω–¥–∞:', response);

      if (!response.success || !Array.isArray(response.recommendations)) {
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
      }

      return response.recommendations;
      
    } catch (error: any) {
      console.error('‚ùå RecommendationService: –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±—ç–∫–µ–Ω–¥—É:', {
        error: error.message || error,
        status: error.status,
        statusText: error.statusText,
        url: error.url
      });
      
      if (error.status === 401) {
        console.warn('‚ö†Ô∏è RecommendationService: –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.');
      }
      
      throw error;
    }
  }

}
