import { Injectable, inject } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { firstValueFrom } from 'rxjs';
import { VKBridgeService } from './vk-bridge.service';
import { AuthService } from './auth.service';
import { environment } from '../../environments/environment';

export interface ChatMessage {
  id: string;
  text: string;
  isUser: boolean;
  timestamp: Date;
}

@Injectable({ providedIn: 'root' })
export class ChatService {
  private http = inject(HttpClient);
  private vk = inject(VKBridgeService);
  private auth = inject(AuthService);
  
  private endpoint = `${environment.apiBaseUrl}/chat`;

  private messages: ChatMessage[] = [];

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
   */
  async sendMessage(userMessage: string): Promise<ChatMessage> {
    const token = this.auth.accessToken();
    if (!token) {
      const errorMsg: ChatMessage = {
        id: this.generateId(),
        text: '–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–∞—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.',
        isUser: false,
        timestamp: new Date()
      };
      this.messages.push(errorMsg);
      return errorMsg;
    }

    const userMsg: ChatMessage = {
      id: this.generateId(),
      text: userMessage,
      isUser: true,
      timestamp: new Date()
    };
    this.messages.push(userMsg);

    try {
      console.log('üåê Connecting to YandexGPT API...');
      const aiResponse = await this.queryYandexGPT(userMessage);
      
      const aiMsg: ChatMessage = {
        id: this.generateId(),
        text: aiResponse,
        isUser: false,
        timestamp: new Date()
      };
      this.messages.push(aiMsg);

      return aiMsg;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:', error);
      
      const errorMsg: ChatMessage = {
        id: this.generateId(),
        text: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        isUser: false,
        timestamp: new Date()
      };
      this.messages.push(errorMsg);

      return errorMsg;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  getMessages(): ChatMessage[] {
    return [...this.messages];
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
   */
  clearHistory(): void {
    this.messages = [];
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ —á–∞—Ç —á–µ—Ä–µ–∑ –±—ç–∫–µ–Ω–¥
   */
  private async queryYandexGPT(userMessage: string): Promise<string> {
    const token = this.auth.accessToken();
    if (!token) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.');
    }

    const headers = new HttpHeaders({
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`
    });

    console.log('üîê –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å JWT —Ç–æ–∫–µ–Ω–æ–º:', token.substring(0, 20) + '...');

    const systemPrompt = this.buildSystemPrompt();
    
    const conversationHistory = this.buildConversationHistory(userMessage);

    const body = {
      messages: [
        {
          role: 'system',
          text: systemPrompt
        },
        ...conversationHistory
      ]
    };

    try {
      const response: any = await firstValueFrom(
        this.http.post(this.endpoint, body, { headers })
      );

      if (!response.success || !response.response) {
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
      }

      return response.response;
      
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ —á–∞—Ç—É:', {
        status: error.status,
        message: error.message,
        error: error.error
      });
      
      if (error.status === 401) {
        throw new Error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.');
      } else if (error.status === 403) {
        throw new Error('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–∞—Ç–∞.');
      } else if (error.status >= 500) {
        throw new Error('–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
      
      throw error;
    }
  }

  /**
   * –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 50+
   */
  private buildSystemPrompt(): string {
    const user = this.vk.user();
    const userName = user ? `${user.first_name}` : '–¥—Ä—É–≥';

    return `–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ —Ç—Ä–µ—Ç—å–µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –æ–±—â–∞–µ—Ç—Å—è —Å –ª—é–¥—å–º–∏ —Å—Ç–∞—Ä—à–µ 50 –ª–µ—Ç.

–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê –û–ë–©–ï–ù–ò–Ø:
- –û–±—Ä–∞—â–∞–π—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –∏–º–µ–Ω–∏ "${userName}" –∏–ª–∏ "–í—ã" —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã
- –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç—ã–µ, –ø–æ–Ω—è—Ç–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
- –ì–æ–≤–æ—Ä–∏ –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –∏ —Ç–µ—Ä–ø–µ–ª–∏–≤–æ, –∫–∞–∫ —Å –±–ª–∏–∑–∫–∏–º –¥—Ä—É–≥–æ–º
- –ï—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç –ø—Ä–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ - –æ–±—ä—è—Å–Ω—è–π –ø–æ—à–∞–≥–æ–≤–æ, –æ—á–µ–Ω—å –ø–æ–¥—Ä–æ–±–Ω–æ
- –ü–æ–æ—â—Ä—è–π –∂–µ–ª–∞–Ω–∏–µ —É—á–∏—Ç—å—Å—è –Ω–æ–≤–æ–º—É –≤ –ª—é–±–æ–º –≤–æ–∑—Ä–∞—Å—Ç–µ
- –î–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ª–µ–≥–∫–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å

–¢–í–û–Ø –†–û–õ–¨:
- –ü–æ–º–æ—â–Ω–∏–∫ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—É—á–µ–Ω–∏—è –∏ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è
- –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏  
- –°–æ–≤–µ—Ç—á–∏–∫ –ø–æ –∑–¥–æ—Ä–æ–≤–æ–º—É –æ–±—Ä–∞–∑—É –∂–∏–∑–Ω–∏
- –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º –ª—é–¥–µ–π —Å—Ç–∞—Ä—à–µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞

–°–¢–ò–õ–¨ –û–¢–í–ï–¢–û–í:
- –ö–æ—Ä–æ—Ç–∫–∏–µ –∞–±–∑–∞—Ü—ã (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –∂–∏–∑–Ω–∏
- –ü–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≥–¥–µ –Ω—É–∂–Ω–æ
- –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π —Ç–æ–Ω

–û—Ç–≤–µ—á–∞–π —Ç–∞–∫, –±—É–¥—Ç–æ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–µ—à—å —Å –º—É–¥—Ä—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º, –∫–æ—Ç–æ—Ä—ã–π –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç —É–≤–∞–∂–µ–Ω–∏—è –∏ —Ö–æ—á–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è.`;
  }

  /**
   * –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   */
  private buildConversationHistory(currentMessage: string): Array<{role: string, text: string}> {
    const history: Array<{role: string, text: string}> = [];
    
    const recentMessages = this.messages.slice(-6);
    
    recentMessages.forEach(msg => {
      history.push({
        role: msg.isUser ? 'user' : 'assistant',
        text: msg.text
      });
    });

    history.push({
      role: 'user',
      text: currentMessage
    });

    return history;
  }


  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  private generateId(): string {
    return Date.now().toString(36) + Math.random().toString(36).substr(2);
  }
}
